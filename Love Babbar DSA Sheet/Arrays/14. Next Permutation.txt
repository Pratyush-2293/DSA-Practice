static List<Integer> nextPermutation(int n, int arr[]){
        // code here
        int k = n-2;
        List<Integer> finalList = new ArrayList<>();
        // check null
        if(n==0){
            return CreateList(arr);
        }

        // find pos of k
        for(int i=n-1;i>0;i--){
            if(arr[i-1]>=arr[i]){
                k--;
            } else{
                break;
            }
        }

        // reverse array if k is -ve
        if(k==-1){
            ReverseArray(arr, 0, n-1);
            return CreateList(arr);
        }

        // else swap arrays
        for(int i=n-1;i>=0;i--){
            if(arr[k]<arr[i]){
                int temp = arr[k];
                arr[k] = arr[i];
                arr[i] = temp;
                break;
            }
        }

        ReverseArray(arr,k+1,n-1);

        return CreateList(arr);
    }
    
    public static void ReverseArray(int arr[], int si, int ei){
        while(si<ei){
            int temp = arr[si];
            arr[si] = arr[ei];
            arr[ei] = temp;
            si++;
            ei--;
        }
    }
    
    public static List<Integer> CreateList(int arr[]){
        List<Integer> newList = new ArrayList<>();
        for(int i=0;i<arr.length;i++){
            newList.add(arr[i]);
        }

        return newList;
    }